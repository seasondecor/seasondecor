import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import GoogleProvider from "next-auth/providers/google";
import BaseRequest from "../../../lib/api/config/Axios-config";
import jwt from "jsonwebtoken"; 

export const authOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        try {
          const response = await BaseRequest.Post("/api/auth/login", {
            email: credentials.email,
            password: credentials.password,
          });
        
          if (response?.token) {
            // Gi·∫£i m√£ JWT token
            const decoded = jwt.decode(response.token);
            console.log("Decoded JWT Token:", decoded); // Log th√¥ng tin ng∆∞·ªùi d√πng t·ª´ token
        
            // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng v√† token ƒë·ªÉ s·ª≠ d·ª•ng trong NextAuth
            return { 
              email: decoded?.email, 
              name: decoded?.name, 
              role: decoded?.role,
              id: decoded?.id, // Th√™m ID v√†o
              token: response.token 
            };
          } else {
            throw new Error("Invalid email or password");
          }
        } catch (error) {
          console.error("Login error:", error.response?.data || error.message);
          throw new Error(error.response?.data?.message || "Invalid email or password");
        }
      },
    }),

    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      async profile(profile) {
        try {
          const response = await BaseRequest.Post("/api/Auth/google-login", {
            credential: profile.sub,
            roleId: 0, // N·∫øu backend y√™u c·∫ßu roleId
          });

          if (response?.token) {
            // üî• Gi·∫£i m√£ token c·ªßa Google ƒë·ªÉ l·∫•y th√¥ng tin user
            const decodedToken = jwt.decode(response.token);

            if (!decodedToken) throw new Error("Invalid token");

            return {
              email: decodedToken?.email,
              name: decodedToken?.name,
              role: decodedToken?.role,
              id: decodedToken?.id, // Th√™m ID v√†o
              accessToken: response.token, // L∆∞u access token v√†o
            };
          } else {
            throw new Error("Google login failed");
          }
        } catch (error) {
          console.error("Google Login Error:", error);
          throw new Error("Google authentication failed");
        }
      },
    }),
  ],

  pages: {
    signIn: "/authen/login",
  },

  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.accessToken = user.accessToken; // L∆∞u accessToken v√†o JWT
        token.user = user; // L∆∞u to√†n b·ªô th√¥ng tin user v√†o token
        token.id = user.id; // L∆∞u ID v√†o token
      }
      return token;
    },

    async session({ session, token }) {
      session.accessToken = token.accessToken; // Truy xu·∫•t accessToken t·ª´ JWT
      session.user = token.user; // Th√™m user v√†o session ƒë·ªÉ frontend c√≥ th·ªÉ truy xu·∫•t
      session.user.id = token.id; // Th√™m ID v√†o session
      return session;
    },
  },

  secret: process.env.NEXTAUTH_SECRET, // ƒê·∫£m b·∫£o b·∫£o m·∫≠t
  session: {
    strategy: "jwt", // D√πng JWT thay v√¨ session tr√™n server
  },
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
